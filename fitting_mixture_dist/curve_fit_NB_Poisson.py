import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.special import gamma, factorial
from statsmodels.discrete.discrete_model import NegativeBinomial as NB

'''
xdata = [ -10.0, -9.0, -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
ydata = [1.2, 4.2, 6.7, 8.3, 10.6, 11.7, 13.5, 14.5, 15.7, 16.1, 16.6, 16.0, 15.4, 14.4, 14.2, 12.7, 10.3, 8.6, 6.1, 3.9, 2.1]

#Recast xdata and ydata into numpy arrays so we can use their handy features
xdata = np.asarray(xdata)
ydata = np.asarray(ydata)
plt.plot(xdata, ydata, 'o')


# Define the Gaussian function
def Gauss(x, A, B):
    y = A*np.exp(-1*B*x**2)
    return y

parameters, covariance = curve_fit(Gauss, xdata, ydata)

fit_A = parameters[0]
fit_B = parameters[1]
print(fit_A)
print(fit_B)

fit_y = Gauss(xdata, fit_A, fit_B)
plt.plot(xdata, ydata, 'o', label='data')
plt.plot(xdata, fit_y, '-', label='fit')
plt.legend()

SE = np.sqrt(np.diag(covariance))
SE_A = SE[0]
SE_B = SE[1]

print(F'The value of A is {fit_A:.5f} with standard error of {SE_A:.5f}.')
print(F'The value of B is {fit_B:.5f} with standard error of {SE_B:.5f}.')
'''

x=[0.18419633225458468, 0.03425026968716289, 0.02251887810140237, 0.043689320388349516, 0.06809600862998921, 4.9037216828478964, 0.5106526429341963, 0.13174217907227617, 0.2676645091693635, 0.0012135922330097086, 0.005393743257820928, 0.03344120819848975, 0.20388349514563106, 0.02413700107874865, 0.34331175836030203, 0.049217907227615966, 0.4007551240560949, 0.4134304207119741, 1.0558252427184467, 0.3737864077669903, 0.16370010787486516, 0.08265911542610571, 0.05838727076591154, 0.0796925566343042, 0.04571197411003236, 0.002562028047464941, 0.3168824163969795, 0.015102481121898598, 0.0036407766990291263, 0.008090614886731391, 0.004989212513484358, 0.008225458468176915, 0.36542610571736783, 0.03681229773462783, 0.12931499460625676, 0.09600862998921252, 0.13012405609492989, 1.63915857605178, 0.12378640776699029, 0.23692017259978426, 0.07510787486515642, 0.06405070118662351, 0.01699029126213592, 0.06297195253505933, 0.01267529665587918, 0.019282632146709815, 0.008225458468176915, 0.017934196332254584, 0.06202804746494067, 0.24042610571736786, 0.04894822006472492, 0.35558252427184467, 0.00337108953613808, 0.30596008629989213, 0.029395900755124056, 0.01847357065803668, 0.010517799352750809, 0.003236245954692557, 0.02332793959007551, 0.009034519956850054, 0.01483279395900755, 0.004584681769147788, 0.06769147788565265, 0.015911542610571736, 0.009573894282632146, 0.061893203883495146, 1.171655879180151, 0.04180151024811219, 0.014023732470334413, 0.03290183387270766, 0.027238403451995685, 0.003236245954692557, 0.00633764832793959, 0.09209816612729234, 0.0018878101402373248, 0.2563376483279396, 0.9354099244875944, 0.31472491909385114, 0.02063106796116505, 0.5671521035598706, 0.19107335490830638, 1.0043149946062568, 0.023462783171521034, 0.07996224379719526, 0.0093042071197411, 0.09681769147788566, 0.14981121898597627, 0.013888888888888888, 0.00849514563106796, 0.01307982740021575, 0.03249730312837109, 0.023732470334412083, 0.058656957928802586, 0.030609492988133764, 0.1650485436893204, 0.14684466019417475, 0.13106796116504854, 0.08319848975188782, 0.007955771305285868, 0.20954692556634305, 0.01442826321467098, 3.399676375404531, 0.01982200647249191, 0.3364347357065804, 0.02481121898597627, 0.008360302049622438, 0.00889967637540453, 0.016316073354908308, 0.01604638619201726, 0.0093042071197411, 0.0008090614886731392, 0.0024271844660194173, 0.012135922330097087, 0.0016181229773462784, 0.09762675296655879, 0.21103020496224378, 0.07861380798274002, 0.7002427184466019, 0.12810140237324702, 1.993527508090615]
y=[0.8007534803319323, 0.07029401719246352, 0.027944895814062676, 0.06686146982121088, 0.1128116930477015, 270.59213285888467, 4.8388832849525265, 0.4353139011658102, 0.4797311150619499, 0.0012121194269018286, 0.005364650791490783, 1.266141664018781, 0.3284423078937707, 0.04539906645185037, 2.931759474543096, 0.0815851488486906, 3.941337078115899, 3.552376258103201, 4.815384081649674, 3.881319320073887, 1.0576143566665726, 0.18478019987104816, 0.13291778745394092, 0.2726404664278369, 1.129382907332632, 0.0025554640597487324, 1.1587548977168605, 0.05236091182772395, 0.003627521444057566, 0.00910390548904944, 0.004964320271980191, 0.008427487464056548, 1.5948887882291107, 0.07456179108931694, 0.25876306906314733, 0.11618687371194246, 0.3888120665949278, 11.961756789308525, 0.17561543657898251, 0.3752334488594644, 0.09508696247302853, 0.2856763642039721, 0.1442636493124457, 0.1628360434419831, 0.01359338216212683, 0.06260013263256, 0.008157800301165512, 0.02273661702909767, 0.16875230557795584, 1.6707551582398987, 0.10318659602434861, 1.1490465053256136, 0.0033597252914769615, 8.679986052345438, 0.03473458652041517, 0.019750420822525056, 0.010407175249526654, 0.00322577266681359, 0.026829054267921894, 0.01218914336069256, 0.014882469345270712, 0.0056424111137899, 0.1038321033038466, 0.0172764883996675, 0.012988167948482525, 0.24360720326561958, 2.690194453317667, 0.05758380957699831, 0.020299559307317486, 0.0606758296298652, 0.02838428296961698, 0.0032257726668136117, 0.006567169704502387, 0.41533130427930437, 0.0018842463131114413, 2.327629737126388, 5.837386913946332, 1.3092545899182642, 0.02182354997328945, 7.785943669419535, 1.3738199913827787, 3.083314714154602, 0.025878839769171106, 0.21002998778699544, 0.009217638849613873, 0.10955837345185278, 0.5157173322149593, 0.0660152972551919, 0.008692665294664594, 0.01803280161032428, 0.05085870414591033, 0.02559642465225804, 0.10969312611931459, 0.05610189389047362, 1.1102994313004706, 0.17787030273037002, 0.5070930342162386, 0.1453164147549925, 0.008162164171115526, 1.5523684031379408, 0.052515665565817965, 35.075426000984244, 0.06662434803782817, 0.6342496405626724, 0.06842431711254437, 0.016381022285997884, 0.010977969438944806, 0.04193982674273681, 0.04572417476310546, 0.010026700338285744, 0.000808406908180471, 0.002421293241587647, 0.013876451859533463, 0.001615504655376543, 0.12531259855074556, 1.2579204057760267, 0.24233658979861045, 2.911628851551246, 0.3913570210013121, 27.316301148917603]

def bimodalG1G2(x,mu1,mu2,s1,s2,p1):
    disA=np.exp(-0.5*(x-mu1)**2 / s1**2.) / (s1*np.sqrt(2.0 * np.pi))
    disB=np.exp(-0.5*(x-mu2)**2 / s2**2.) / (s2*np.sqrt(2.0 * np.pi))
    return p1*disA+(1-p1)*disB

def NBpmf(x,r,p):
    #x must be integer
    disA=[]
    for k in range(len(x)):
        const=np.math.gamma(r+k)/(np.math.factorial(k)*np.math.gamma(r))
        value=const* ((1-p)**k)*(p**r)
        disA.append(value)
    disA=np.array(disA)
    return disA


def NB_and_poisson(x,r,p,lamb,w):
    #x must be integer
    disA=[]
    disB=[]
    for kk in range(len(x)):
        k=x[kk]
        #print(kk,r,p,k)
        const=np.math.gamma(r+k)/(np.math.factorial(k)*np.math.gamma(r))
        value=const* ((1-p)**k)*(p**r)
        disA.append(value)
        disB.append((lamb**k)*(np.exp(-lamb))/np.math.factorial(k))
    disA=np.array(disA)
    disB=np.array(disB)

    return w*disA+(1-w)*disB

def negativeBinomial(k,mu,alpha):
    #print(const)
    var=mu+alpha*(mu**2)
    p=mu/var
    r=mu**2/(var-mu)
    print(r,k)
    const=np.math.gamma(r+k)/(np.math.factorial(k)*np.math.gamma(r))

    value=const* ((1-p)**k)*(p**r)
    return value

xdata = np.asarray(x)
ydata = np.asarray(y)
#plt.plot(xdata, ydata, 'o')

#rr=negativeBinomial(k,mu,var)



#mu=19;sigma=2;data1=mu+sigma*np.random.randn(10000,1)
data1=np.random.poisson(1, (10000,1))
data2=np.random.negative_binomial(2, 0.15, size=(10000,1)) # parameter is n and p
#data2=np.random.exponential(5, size=(10000,1))
#data2=np.random.beta(1,10, (10000,1))

data=np.vstack((data1,data2))
print(data2.shape,data.shape)


hist=plt.hist(data,bins=np.arange(50),density=True,facecolor='g',alpha=0.75)
#x = [hist[0], 0.5*(hist[1][1:]+hist[1][:-1])]; xdata=x[1];ydata=x[0];

xdata=hist[1][0:-1];ydata=hist[0];
print(xdata)


popt, pcov = curve_fit(NB_and_poisson, xdata, ydata)
print('point1',popt)
plt.plot(xdata, NB_and_poisson(xdata, *popt), 'k-', label='fit: r=%5.3f, p=%5.3f, lamb=%5.3f, w=%5.3f' % tuple(popt))
#parameters, covariance = curve_fit(negativeBinomial, xdata, ydata)
#print(parameters)
#yfit=negativeBinomial(xdata,1)

popt, pcov = curve_fit(NB_and_poisson, xdata, ydata, bounds=(0, [2,0.15,1,0.5]))
print('point2',popt)
plt.plot(xdata, NB_and_poisson(xdata, *popt), 'g--', label='fit: r=%5.3f, p=%5.3f, lamb=%5.3f, w=%5.3f' % tuple(popt))

#plt.plot(xdata, yfit, '-', label='fit')

plt.legend(fontsize=10, loc='best')

plt.show()
